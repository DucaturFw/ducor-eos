#include <eosiolib/eosio.hpp>
#include <eosiolib/singleton.hpp>
#include <eosiolib/time.hpp>
#include <eosiolib/system.h>

using namespace eosio;

template <uint64_t OraclizeName, uint32_t BestBeforeOffset, uint32_t UpdateOffset, typename T>
class oraclized
{
  struct data
  {
    uint32_t best_before;
    uint32_t update_after;
    T value;

    EOSLIB_SERIALIZE(data, (best_before)(update_after)(value))
  };

  constexpr static uint64_t pk_value = OraclizeName;
  struct row
  {
    data value;

    uint64_t primary_key() const { return pk_value; }

    EOSLIB_SERIALIZE(row, (value))
  };

  typedef eosio::multi_index<OraclizeName, row> table;

private:
  table _t;

public:
  oraclized(account_name code, scope_name scope) : _t(code, scope) {}

  bool exists()
  {
    return _t.find(pk_value) != _t.end();
  }

  bool fresh()
  {
    return exists() && get().best_before > now();
  }

  T value()
  {
    return get().value;
  }

  data get()
  {
    auto itr = _t.find(pk_value);
    eosio_assert(itr != _t.end(), "singleton does not exist");
    return itr->value;
  }

  data get_or_default(const T &def = T())
  {
    auto itr = _t.find(pk_value);
    return itr != _t.end() ? itr->value : def;
  }

  data get_or_create(account_name bill_to_account, const T &def = T())
  {
    auto itr = _t.find(pk_value);
    return itr != _t.end() ? itr->value
                           : _t.emplace(bill_to_account, [&](row &r) { r.value = data{}; });
  }

  void set(const T &value, account_name bill_to_account)
  {
    auto itr = _t.find(pk_value);
    if (itr != _t.end())
    {
      _t.modify(itr, bill_to_account, [&](row &r) { r.value = data{now() + BestBeforeOffset, now() + UpdateOffset, value}; });
    }
    else
    {
      _t.emplace(bill_to_account, [&](row &r) { r.value = data{now() + BestBeforeOffset, now() + UpdateOffset, value}; });
    }
  }

  void remove()
  {
    auto itr = _t.find(pk_value);
    if (itr != _t.end())
    {
      _t.erase(itr);
    }
  }
};

{{~ it.customs :c}}struct {{= c.name}}
{
  {{~ c.fields :f}}{{= f.type }} {{= f.name }};
  {{~}}

  EOSLIB_SERIALIZE({{= c.name }}, {{~ c.fields :f}}({{= f.name }}){{~}})
};
{{~}}
{{~ it.providers :p }}
typedef oraclized<N({{= p.alias }}), {{= p.bestBefore }}, {{= p.updateAfter }}, {{= p.type }}> {{= p.name }}_data;{{~}}
typedef singleton<N(master), account_name> oraclize_master;
typedef singleton<N(master), account_name> oracle_account;

class YOUR_CONTRACT_NAME : public eosio::contract
{
private:
{{~ it.providers :p }}
  {{= p.name }}_data {{= p.name }};{{~}}

  account_name known_master;
  account_name known_oracle;

public:
  using contract::contract;

  YOUR_CONTRACT_NAME(account_name s) : contract(s){{~ it.providers :p }}, {{= p.name }}(_self, _self){{~}}
  {
    known_master = oraclize_master(_self, _self).get_or_create(_self, N(undefined));
    known_oracle = oracle_account(_self, _self).get_or_create(_self, N(undefined));
  }

  void setup(account_name administrator, account_name master, account_name registry)
  {
    require_auth(_self);
    oraclize_master(_self, _self).set(master, _self);
    {{~ it.providers :p}}ask_data(administrator, registry, "{{= p.id }}");
    {{~}}
  }

  void ask_data(account_name administrator, account_name registry, std::string data)
  {
    action(permission_level{administrator, N(active)},
           registry, N(ask),
           std::make_tuple(administrator, _self, data))
        .send();
  }{{~ it.endpoints :e }}
  
  void push{{= e.suffix }}(account_name oracle, std::string data_id, {{= e.type }} data) 
  {
    require_auth(oracle);
    {{~ it.providers :p }}{{? p.type === e.type }}
    if (strcmp(data_id.c_str(), "{{= p.id }}") == 0) 
    {
      {{= p.name}}.set(data, oracle);
    }{{?}}{{~}}
  }{{~}}
};

EOSIO_ABI(YOUR_CONTRACT_NAME, (setup){{~ it.endpoints : e }}(push{{= e.suffix }}){{~}})